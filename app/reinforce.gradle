ext {
    //加固插件路径
    reinforce_plugin_path = '../reinforce'
    //360加固账号密码
    reinforce_plugin_name = '15974255013'
    reinforce_plugin_passward = 'lt767435'
    //签名信息
    key_store_path = './keystore/airline.jks'
    key_store_passward = 'al123456'
    alias = 'airline'
    alias_passward = 'al123456'
    //加固ApK输出路径
    reinforce_apk_path = 'build/outputs/apk/release/reinforce/'
    //加固包名称
    reinforce_apk_name = 'build/outputs/apk/release/reinforce/release_encrypted_aligned_signed.apk'
    //渠道配置文件
    chanel_config_path = reinforce_plugin_path + '/channel.txt'
    //渠道Apk输出路径
    channel_apks_path = 'build/outputs/apk/release/channels/'
}

/**
 * 注释：编译加固渠道包
 * 时间：2019/1/2 0002 14:01
 * 作者：郭翰林
 */
task buildReinforceRelease() {
    group '360reinforce'
    dependsOn('assembleRelease')
    doLast {
        //第一步：清空缓存
        cleanFilesPath(reinforce_plugin_path + "/.cache")
        cleanFilesPath(reinforce_plugin_path + "/output")
        cleanFilesPath(reinforce_plugin_path + "/jiagu.db")
        cleanFilesPath(reinforce_apk_path)
        cleanFilesPath(channel_apks_path)
        //第二步：开始加固
        reinforceApk()
        //第三部：重命名加固包
        renameReinforceApk()
        //第四步：打多渠道包
        buildChannelApks()
    }
}

/**
 * 注释：打多渠道包
 * 时间：2019/1/4 0004 13:26
 * 作者：郭翰林
 */
def buildChannelApks() {
    println('开始编译多渠道包')
    File reinforceApk = new File(reinforce_apk_name)
    if (!reinforceApk.exists()) {
        return
    }
    //新建渠道包目录
    File channelsPath = new File(channel_apks_path)
    if (!channelsPath.exists()) {
        channelsPath.mkdir()
    }
    exec {
        commandLine "powershell", "java -jar", reinforce_plugin_path + "/lib/walle-cli-all.jar batch -f ", chanel_config_path, reinforce_apk_name, channel_apks_path
    }
    println('编译多渠道包成功，生成的渠道包路径:' + channelsPath.getAbsolutePath())
}

/**
 * 注释：重命名已加固好的APK
 * 时间：2019/1/4 0004 12:48
 * 作者：郭翰林
 */
def renameReinforceApk() {
    File files = new File('build/outputs/apk/release/reinforce')
    if (!files.exists()) {
        return
    }
    if (files.isDirectory()) {
        String[] content = files.list()//取得当前目录下所有文件和文件夹
        for (String name : content) {
            //由于第一步清空缓存，reinforce文件夹内只会有一个已经加固并且签名的包
            File signedApk = new File('build/outputs/apk/release/reinforce', name)
            File renameApk = new File(reinforce_apk_name)
            if (signedApk.exists() && signedApk.isFile()) {
                signedApk.renameTo(renameApk)
            }
        }
    }
}

/**
 * 注释：使用360加固加固Release包
 * 时间：2019/1/2 0002 14:32
 * 作者：郭翰林
 */
def reinforceApk() {
    println('开始进行加固操作')
    File releaseApk = new File('build/outputs/apk/release/app-release.apk')
    if (!releaseApk.exists()) {
        throw new FileNotFoundException('Release包不存在，无法进行加固操作')
    }
    String releasePath = 'build/outputs/apk/release/app-release.apk'
    //创建加固文件夹
    File reinforcePath = new File(reinforce_apk_path)
    if (!reinforcePath.exists()) {
        reinforcePath.mkdir()
    }
    exec {
        commandLine "powershell", "java -jar", reinforce_plugin_path + "/jiagu.jar", "-login", reinforce_plugin_name, reinforce_plugin_passward
    }
    exec {
        commandLine "powershell", "java -jar", reinforce_plugin_path + "/jiagu.jar", "-importsign", key_store_path, key_store_passward, alias, alias_passward
    }
    exec {
        commandLine "powershell", "java -jar", reinforce_plugin_path + "/jiagu.jar", "-jiagu", releasePath, reinforce_apk_path, "-autosign"
    }
    println('加固操作结束，加固包路径' + reinforcePath.getAbsolutePath())
}

/**
 * 注释：清空文件夹
 * 时间：2019/1/2 0002 14:15
 * 作者：郭翰林
 */
def cleanFilesPath(String path) {
    File files = new File(path)
    if (!files.exists()) {
        return
    }
    println('开始执行清除:' + files.getAbsolutePath())
    if (files.isDirectory()) {
        String[] content = files.list()//取得当前目录下所有文件和文件夹
        for (String name : content) {
            File temp = new File(path, name)
            if (temp.isDirectory()) {//判断是否是目录
                cleanFilesPath(temp.getAbsolutePath())//递归调用，删除目录里的内容
                temp.delete()
            } else {
                temp.delete()
            }
        }
    }
    files.delete()
}
